points(T[0:188,7],T[0:188,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[0:188,7],T[0:188,8], pch=1, col="red")
View(df)
View(df)
plot(T[0:187,7],T[0:187,8], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,8], pch=1, col="red")
plot(T[0:187,7],T[0:187,8], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,8], pch=1, col="red")
points(T[287:634,7],T[287:634,8], pch=1, col="black")
plot(T[0:187,8],T[0:187,9], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,8],T[188:286,9], pch=1, col="red")
points(T[287:634,8],T[287:634,9], pch=1, col="black")
View(df)
View(df_numeric)
plot(T[0:187,7],T[0:187,134], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,134], pch=1, col="red")
points(T[287:634,7],T[287:634,134], pch=1, col="black")
plot(T[0:187,7],T[0:187,134], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-1,1),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,134], pch=1, col="red")
points(T[287:634,7],T[287:634,134], pch=1, col="black")
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv', row.names = "X")
View(df)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
View(df)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- data[ , ncol(data)]                   # Apply ncol function
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
last_vec
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
res <- rcorr(as.matrix(df_numeric))
res <- rcorr(as.matrix(df_numeric))
res <- rcorr(as.matrix(df_numeric))
round(res$P, 3)
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(dat[, c("prob_sheet", "prob_coil", "prob_helix")])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(dat[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(res[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c("prob_sheet", prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c("prob_sheet", "prob_coil", "prob_helix")])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c("prob_sheet", "prob_coil", "prob_helix", "p_interface")])
install.packages("corrplot")
library(Hmisc)
library(corrplot)
corrplot(cor(df_numeric),
method = "number",
type = "upper" # show only upper side
)
knitr::opts_chunk$set(echo = TRUE)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id))
df_rowsums<-rowSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
df_colsums <- colSums(df_numeric)
hist(df_colsums, xlab='Total amounts per column', main = 'Histogram of data colsums')
View(df_numeric)
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id, X, domain, Rlength))
df_rowsums<-rowSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
df_colsums <- colSums(df_numeric)
hist(df_colsums, xlab='Total amounts per column', main = 'Histogram of data colsums')
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id, X, domain, Rlength))
last_vec <- df_numeric[ , ncol(df)]
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id, X, domain, Rlength))
last_vec <- df_numeric[ , ncol(df_numeric)]
df_rowsums<-rowSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
df_colsums <- colSums(df_numeric)
hist(df_colsums, xlab='Total amounts per column', main = 'Histogram of data colsums')
df_numeric.mean <- apply(transformed,1,mean)
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.5, col='blue', ylim = c(-0.03,0.3),
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='blue', ylim = c(-0.03,0.3),
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='blue', xlim = c(0.1,0.4), ylim = c(-0.03,0.3),
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='blue',
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='red',
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='red',
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of data')
setwd('C:\Users\nikos\OneDrive\Έγγραφα\MSc\Classes\Bioinformatics for Translational Medicine\bstm-project')
setwd('C:\Users\nikos\OneDrive\Έγγραφα\MSc\Classes\Bioinformatics for Translational Medicine\bstm-project')
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
# getwd()
library('caret')
library('gbm')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
#as.data.frame(data)
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
#as.data.frame(clinic)
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
# getwd()
library('caret')
library('gbm')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
#as.data.frame(data)
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
#as.data.frame(clinic)
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
rocVarImp<-filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE)
head(rocVarImp)
final<-apply(rocVarImp, 1, mean)
features<-final[order(final,decreasing = TRUE)]
features<-as.data.frame(features)
write.csv(Combo, "combo.csv", row.names=TRUE)
write.csv(features,"features.csv", row.names=FALSE)
View(features)
hist(features)
View(features)
hist(features)
is.numeric(features)
View(features)
as.numeric(features)
as.numeric(unlist(features))
is.numeric(features)
features<-as.numeric(unlist(features))
is.numeric(features)
hist(features)
features[order(features)[1:20]]
tail(sort(features),5)
tail(sort(features),15)
hist(tail(sort(features),15))
plot(tail(sort(features),15))
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
# getwd()
library('caret')
library('gbm')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
#as.data.frame(data)
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
#as.data.frame(clinic)
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
rocVarImp<-filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE)
head(rocVarImp)
final<-apply(rocVarImp, 1, mean)
features<-final[order(final,decreasing = TRUE)]
features<-as.data.frame(features)
plot(tail(sort(features),15))
View(features)
View(features)
barplot(features$features[1:10],names.arg=features$features[1:10])
barplot(features$features[1:10],names.arg=features$row.names[1:10])
barplot(features$features[1:10],names.arg=row.names(features)[1:10])
barplot(features$features[1:10],names.arg=row.names(features)[1:10], xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
barplot(features$features[1:20],names.arg=row.names(features)[1:20], xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
barplot(features$features[1:20],names.arg=row.names(features)[1:20], cex.names = 1, xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
barplot(features$features[1:20],names.arg=row.names(features)[1:20], cex.names = 0.5, xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
barplot(features$features[1:20],names.arg=row.names(features)[1:20], cex.axis = 0.5, xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
barplot(features$features[1:20],names.arg=row.names(features)[1:20], cex.axis = 1, xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
barplot(features$features[1:20],names.arg=row.names(features)[1:20], cex.axis = 1, cex.names = 0.4, xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
View(data)
data<-t(read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = ""))
View(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
Combo$Row.names<-NULL
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
View(Combo)
Combo <- as.matrix(Combo)
par(mfrow=c(1,2))
matplot(1:77,Combo,type ="l",lwd=1,xlab='individuals', ylab='intensity')
library(knitr)
## FOR EXERCISES CHOOSE THESE OPTIONS
knitr::opts_chunk$set(echo = TRUE, fig.show = 'hide', results = 'hide')
SHOW_ANSWERS=FALSE
intensity <- as.matrix(data)
par(mfrow=c(1,2))
matplot(1:77,intensity,type ="l",lwd=1,xlab='individuals', ylab='intensity')
library(knitr)
## FOR EXERCISES CHOOSE THESE OPTIONS
knitr::opts_chunk$set(echo = TRUE, fig.show = 'hide', results = 'hide')
SHOW_ANSWERS=FALSE
data <- read.csv(file='Cachexia.csv')
head(data[,1:3])
intensity <- as.matrix(data)
par(mfrow=c(1,2))
matplot(1:77,intensity,type ="l",lwd=1,xlab='individuals', ylab='intensity')
matplot(1:63,t(intensity),type ="l",lwd=1,xlab='metabolites', ylab='intensity')
logdata <- log(intensity)
sqrtdata <- sqrt(intensity)
par(mfrow=c(1,3))
hist(intensity[,1])
hist(sqrtdata[,1])
hist(logdata[,1])
m= colMeans(intensity) 			        # calculates column means
Xm=sweep(intensity,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 10                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
data<-t(read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = ""))
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
m= colMeans(intensity) 			        # calculates column means
m= colMeans(Combo) 			        # calculates column means
View(Combo)
numeric_df<-Combo[,-1]
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 10                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 2                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 5                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 8                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 15                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 20                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 30                           # Calculate 10 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
m= colMeans(numeric_df) 			        # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 30                           # Calculate 30 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
sample <- sample(c(TRUE, FALSE), nrow(Combo), replace=TRUE, prob=c(0.8,0.2))
train  <- df[sample, ]
sample <- sample(c(TRUE, FALSE), nrow(Combo), replace=TRUE, prob=c(0.8,0.2))
train  <- df[sample,]
sample <- sample(c(TRUE, FALSE), nrow(Combo), replace=TRUE, prob=c(0.8,0.2))
train  <- Combo[sample,]
test   <- Combo[!sample,]
View(test)
View(train)
rocVarImp<-filterVarImp(train[,-1], as.factor(train[,1]), nonpara = FALSE)
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
library('caret')
library('gbm')
library('caret')
library('gbm')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
sample <- sample(c(TRUE, FALSE), nrow(Combo), replace=TRUE, prob=c(0.8,0.2))
train  <- Combo[sample,]
test   <- Combo[!sample,]
rocVarImp<-filterVarImp(train[,-1], as.factor(train[,1]), nonpara = FALSE)
head(rocVarImp)
final<-apply(rocVarImp, 1, mean)
features<-final[order(final,decreasing = TRUE)]
features<-as.data.frame(features)
barplot(features$features[1:20],names.arg=row.names(features)[1:20], cex.axis = 1, cex.names = 0.4, xlab = "Feature name", ylab = "Feature importance", main = "Top 20 important features")
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
data<-t(read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = ""))
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
sample <- sample(c(TRUE, FALSE), nrow(Combo), replace=TRUE, prob=c(0.8,0.2))
train  <- Combo[sample,]
test   <- Combo[!sample,]
numeric_df<-train[,-1]
m= colMeans(numeric_df) 			      # calculates column means
Xm=sweep(numeric_df,2,m,FUN="-")    # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 30                           # Calculate 30 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
barplot(features$features[1:30],names.arg=row.names(features)[1:30], cex.axis = 1, cex.names = 0.4, xlab = "Feature name", ylab = "Feature importance", main = "Top 30 important features")
barplot(features$features[1:30],names.arg=row.names(features)[1:30], cex.axis = 1, cex.names = 0.2, xlab = "Feature name", ylab = "Feature importance", main = "Top 30 important features")
barplot(features$features[1:30],names.arg=row.names(features)[1:30], cex.axis = 1, cex.names = 0.3, xlab = "Feature name", ylab = "Feature importance", main = "Top 30 important features")
barplot(features$features[1:30],names.arg=row.names(features)[1:30], cex.axis = 1, cex.names = 0.25, xlab = "Feature name", ylab = "Feature importance", main = "Top 30 important features")
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
library('caret')
library('gbm')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
sample <- sample(c(TRUE, FALSE), nrow(Combo), replace=TRUE, prob=c(0.8,0.2))
train  <- Combo[sample,]
test   <- Combo[!sample,]
rocVarImp<-filterVarImp(train[,-1], as.factor(train[,1]), nonpara = FALSE)
head(rocVarImp)
final<-apply(rocVarImp, 1, mean)
features<-final[order(final,decreasing = TRUE)]
features<-as.data.frame(features)
barplot(features$features[1:30],names.arg=row.names(features)[1:30], cex.axis = 1, cex.names = 0.25, xlab = "Feature name", ylab = "Feature importance", main = "Top 30 important features")
write.csv(Combo, "combo.csv", row.names=TRUE)
write.csv(features,"features.csv", row.names=FALSE)
View(features)
View(features)
index_names <- as.list(names(features)[1:30])
View(index_names)
View(features)
typeof(features)
final<-apply(rocVarImp, 1, mean)
features<-final[order(final,decreasing = TRUE)]
features<-as.data.frame(features)
index_names <- names(features)[1:30]
typeof(features)
index_names
View(features)
index_names <- row.names(features)[1:30]
index_names
write.csv(Combo[ , c(index_names)], "n30_combo.csv", row.names=TRUE)
write.csv(features[ , c(index_names)],"n30_features.csv", row.names=FALSE)
Combo[ , c(index_names)]
View(clinic)
write.csv(Combo[ , c(index_names)], "n30_combo.csv", row.names=TRUE)
write.csv(clinic[ , c(index_names)],"n30_clinic.csv", row.names=TRUE)
write.csv(Combo[ , c(index_names)], "n30_combo.csv", row.names=TRUE)
index_names <- row.names(features)[1:30]
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
library('caret')
library('gbm')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
sample <- sample(c(TRUE, FALSE), nrow(Combo), replace=TRUE, prob=c(0.8,0.2))
train  <- Combo[sample,]
test   <- Combo[!sample,]
rocVarImp<-filterVarImp(train[,-1], as.factor(train[,1]), nonpara = FALSE)
final<-apply(rocVarImp, 1, mean)
features<-final[order(final,decreasing = TRUE)]
features<-as.data.frame(features)
index_names <- row.names(features)[1:30]
write.csv(Combo[ , c(index_names)], "n30_combo.csv", row.names=TRUE)
