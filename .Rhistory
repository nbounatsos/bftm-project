plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-100,100),main = "raw
expression  scores", cex.main=1)
points(T[20:38,1],T[20:38,2], pch=1, col="red")
points(T[39:56,1],T[39:56,2], pch=2, col="purple")
points(T[57:74,1],T[57:74,2], pch=4, col="black")
points(T[75:93,1],T[75:93,2], pch=5, col="green")
points(T[94:112,1],T[94:112,2], pch=6, col="gray")
points(T[113:130,1],T[113:130,2], pch=7, col="cyan")
points(T[131:145,1],T[131:145,2], pch=8, col="brown")
legend(x="topleft", legend=c("21-L", "21-D", "4-L","4-D","32-L","32-D","21-LL","21-HL"),col=c("blue","red","purple","black","green","gray","cyan","brown"),pch=c(3,1,2,4,5,6,7,8), cex=0.7)
M_intensity_scaled <- metabolomics_numerical #import numerical (values already transformed)
m_m= colMeans(M_intensity_scaled) 			        # calculates column means
Xm_m=sweep(M_intensity_scaled,2,m_m,FUN="-")     # subtract the column means
ssqtotal_m <- sum(Xm_m*Xm_m)			        # calculates the sum of squares
USV_m <- svd(Xm_m)					            # see the help for this function
T_m <- USV_m$u %*% diag(USV_m$d)          # Calculate scores
P_m <- USV_m$v                          # Loadings
npc <- 2                           # Calculate 2 PCs
ssq_m <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest_m  <- T_m[,i] %*% t(P_m[,i])
ssq_m[i] <- 100*sum(Xest_m*Xest_m)/ssqtotal_m
}
ssqcum_m = cumsum(ssq_m)                # calculate cumulative ssq
data.frame(ssq_m=ssq_m,ssqtot_m=ssqcum_m)
plot(T_m[1:18,1],T_m[1:18,2], pch=3, col="blue", xlab= "PC1(38.2%)",ylab ="PC2(17.9%)",xlim = c(-5,5),ylim = c(-5,5),main = "raw metabolomic
scores", cex.main=1)
points(T_m[19:36,1],T_m[19:36,2], pch=1, col="red")
points(T_m[37:55,1],T_m[37:55,2], pch=2, col="purple")
points(T_m[56:73,1],T_m[56:73,2], pch=4, col="black")
points(T_m[74:91,1],T_m[74:91,2], pch=5, col="green")
points(T_m[92:109,1],T_m[92:109,2], pch=6, col="gray")
points(T_m[110:127,1],T_m[110:127,2], pch=7, col="cyan")
points(T_m[128:145,1],T_m[128:145,2], pch=8, col="brown")
legend(x="bottomright", legend=c("21-D", "21-HL", "21-L","21-LL","32-D","32-L","4-D","4-L"),
col=c("blue", "red","purple", "black","green","gray","cyan","brown"), pch = c(3,1,2,4,5,6,7,8), cex=0.7)
barplot(P_m[,1], main = "Loadings",ylim = c(-0.5,0.5), cex.main=0.8)
print("the most important metabolite is:")
colnames(metabolomics_numerical)[which.max(abs(P_m[,1]))]
Expression_reconstruct <- T[,1:2] %*% t(P[,1:2])
residuals <- Xm - Expression_reconstruct
Res_row = rowSums(residuals*residuals)
Res_col = colSums(residuals*residuals)
barplot(Res_row,main = "Residuals per Individual")
barplot(Res_col,main = "Residuals per Variable")
Res_row[which.max(Res_row)]/mean(Res_row)
ssq_reconstruct = colSums(Expression_reconstruct**2)
ssq_input = colSums(df_scaled_e**2)
which.min(ssq_reconstruct/ssq_input)
barplot(P[,1], main = "PC1 LOADINGS", xlab = "Genes" ,ylab = "scores")
test2<-order(abs(P[,1]), decreasing = TRUE)[1:3]
for (x in 1:3) {
important_genes<-df_expression[test2[x]]
}
conditions = unique(df_expression$condition)
colours = c("grey", "black", "cyan", "blue", "orange", "red", "green", "yellow")
plot_hclust = function(hclust_result){
dendrogram = dendrapply(as.dendrogram(hclust_result), labelCol)
plot(dendrogram)
}
labelCol <- function(x) {
if (is.leaf(x)) {
## fetch label
label = attr(x, "label")
## extract condition
condition = str_split_fixed(label, "_", 2)[,1]
## set label color
index = which(conditions == condition)
attr(x, "nodePar") = list(lab.col = colours[index])
}
return(x)
}
make_heatmap = function(data, condition1, condition2){
referenceSample = data[(data$condition == "21-L") & (data$time == 0), 3:94]
data = data[data$condition %in% c(condition1, condition2),]
conditionLabels = data$condition
timepoints = data$time
data = sweep(data[,3:94], 2, as.numeric(referenceSample), FUN="-")
selectMetabolites = as.data.frame(cbind(colnames(data), apply(abs(data), 2, mean)))
selectMetabolites = selectMetabolites[order(selectMetabolites[,2], decreasing=TRUE),]
selectMetabolites = row.names(selectMetabolites)[1:20]
reordering = order(factor(conditionLabels, levels=c(c(condition1, condition2))), timepoints)
data = data[reordering, colnames(data) %in% selectMetabolites]
conditionLabels = conditionLabels[reordering]
data = t(data)
colColours = 1:ncol(data)
for(i in 1:ncol(data)){
sampleCondition = conditionLabels[i]
index = which(conditions == sampleCondition)
colColours[i] = colours[index]
}
heatmap.2a(as.matrix(data[,order(conditionLabels)]), scale="row", hclustfun=function(x){hclust(x,method="average")}, Colv=FALSE, breaks=48, col=colorRampPalette(c("red", "white", "blue"), bias=0.75, space="rgb"), trace="none", dendrogram="row", ColSideColors=colColours)
}
euclidean_distance_expression<-dist(expression_numerical,method = "euclidean")
hclust_result_expression<- hclust(euclidean_distance_expression, method = "average")
plot_hclust(hclust_result_expression)
euclidean_distance_metabolomics<-dist(metabolomics_numerical,method = "euclidean")
hclust_result_metabolomics<- hclust(euclidean_distance_metabolomics, method = "average")
plot_hclust(hclust_result_metabolomics)
dend1 <- as.dendrogram (hclust_result_expression)
dend2 <- as.dendrogram (hclust_result_metabolomics)
dendlist(dend1, dend2) %>%
untangle(method = "step1side") %>%      # Find the best alignment layout
tanglegram(                             # Draw the two dendrograms
highlight_distinct_edges = FALSE,     # Turn-off dashed lines
common_subtrees_color_lines = FALSE,  # Turn-off line colors
common_subtrees_color_branches = TRUE # Color common branches
)
test<- subset(df_metabolomics[-1])
make_heatmap(test, condition1, condition2)
metabolomics_name<-subset(df_metabolomics[-1,-3])
expression_name<-subset(df_expression[-1,-3])
custom.config = umap.defaults
custom.config$random_state = 123
custom.config$n_neighbors = 15
X_m<-as.matrix(metabolomics_numerical)
Y_m<-as.numeric(as.factor(metabolomics_name$condition))
umap_metabolomics <- umap(X_m,custom.config)
X_e<-as.matrix(expression_numerical)
Y_e<-as.numeric(as.factor(expression_name$condition))
umap_expression <- umap(X_e,custom.config)
plot(umap_metabolomics$layout[,1],umap_metabolomics$layout[,2], col=Y_m)
legend(x= "bottomleft",c("21-D", "21-HL", "21-L","21-LL","32-D","32-L","4-D","4-L"),col=1:8,pch = 1)
plot(umap_expression$layout[,1],umap_expression$layout[,2], col=Y_e)
legend(x= "bottomleft",c("21-L", "21-D", "4-L","4-D","32-L","32-D","21-LL","21-HL"),col=1:8,pch = 1)
Reduced_M <- metabolomics_numerical[c(19:36, 56:73),]
Centered_Reduced_M = scale(Reduced_M, center = TRUE, scale= FALSE)
group = c(array(0,dim = 18),array(1,dim = 18))
# APPLY LDA ON THE CENTERED DATA
reslda <- lda(x = Centered_Reduced_M,group)
d = reslda$scaling  # direction in variable space
d0 = -0.5*(reslda$means[2,] + reslda$means[1,]) %*% d
# d0 when the data is not centered, if its centered it goes to 0
# computationally 3.515979e-17=0 (anything on e^-13 and up is considered as                                                            0)
D_lda = Centered_Reduced_M %*% d + matrix(d0, nrow = 36, ncol = 1)
# Cnew = Xnew * d + d0
Scaled_Reduced_M = scale(Reduced_M, center = TRUE, scale= TRUE)
m_r = colMeans(Scaled_Reduced_M) 			        # calculates column means
Xm_r = sweep(Scaled_Reduced_M,2,m_r,FUN="-")     # subtract the column means
ssqtotal_r <- sum(Xm_r*Xm_r)			        # calculates the sum of squares
npc = 2; # We will only use 2 PCs here
SVD <- svd(Scaled_Reduced_M, nu = npc, nv = npc)   # svd calculating only 2 components
T_r = SVD$u %*% diag(SVD$d[1:npc])
P_r = SVD$v
ssq_r <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest_r  <- T_r[,i] %*% t(P_r[,i])
ssq_r[i] <- 100*sum(Xest_r*Xest_r)/ssqtotal_r
}
ssqcum_r = cumsum(ssq_r)                # calculate cumulative ssq
data.frame(ssq_r=ssq_r,ssqtot_r=ssqcum_r)
plot(T_r[1:18,1],T_r[1:18,2], pch=3, col="blue", xlab= "PC1(31.2%)",ylab ="PC2(23.9%)",xlim = c(-15,15),ylim = c(-15,15),main = "Reduced Metabolomic
scores", cex.main=1)
points(T_r[19:36,1],T_r[19:36,2], pch=1, col="red")
legend(x="bottomright", legend=c("21-HL", "21-LL"),
col=c("blue", "red"),pch = c(3,1), cex=0.7)
## PCDA
reslda_pcda <- lda(x =T_r,group) # Now lda is applied on the PCA scores T_r
d_pcda = reslda_pcda$scaling
d0_pcda = -0.5*(reslda_pcda$means[2,] + reslda_pcda$means[1,]) %*% d_pcda
r_pcda = P_r%*%d_pcda
D_pcda = Scaled_Reduced_M %*% r_pcda  #projection of samples on discrimination line
t.test(D_pcda[1:18],D_pcda[19:36],var.equal = FALSE)
colnames(Scaled_Reduced_M)[which.max(abs(r_pcda))]
knitr::opts_chunk$set(echo = TRUE)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
View(df)
View(df)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv', row.names = "X")
View(df)
```{r}
hist(df_colsums, xlab='Total amounts per column', main = "Histogram of data colsums")
df_rowsums<-rowSums(df)
df_rowsums<-rowSums(df)
View(df)
df_numeric<-subset(df, select = -c("aa_ProtPosition","sequence", "unprot_id"))
df_numeric<-subset(df, select = -c('aa_ProtPosition','sequence', 'unprot_id'))
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, unprot_id))
df_rowsums<-rowSums(df_numeric)
df_colsums<-colSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
hist(df_colsums, xlab='Total amounts per column', main = "Histogram of data colsums")
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, unprot_id))
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id))
df_rowsums<-rowSums(df_numeric)
df_colsums<-colSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
hist(df_colsums, xlab='Total amounts per column', main = "Histogram of data colsums")
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id))
df_rowsums<-rowSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
m= colMeans(df_numeric) 			        # calculates column means
Xm=sweep(df_numeric,2,m,FUN="-")     # subtract the column means
ssqtotal <- sum(Xm*Xm)			        # calculates the sum of squares
USV <- svd(Xm)					            # see the help for this function
T <- USV$u %*% diag(USV$d)          # Calculate scores
P <- USV$v                          # Loadings
npc <- 2                        # Calculate 2 PCs
ssq <- 0 * (1:npc)                  # Initialize variable ssq
for (i in 1:npc){                   # for loop to calculate sum of squares for each component
Xest  <- T[,i] %*% t(P[,i])
ssq[i] <- 100*sum(Xest*Xest)/ssqtotal
}
ssqcum = cumsum(ssq)                # calculate cumulative ssq
data.frame(ssq=ssq,ssqtot=ssqcum)
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-100,100),main = "raw
expression  scores", cex.main=1)
points(T[20:38,1],T[20:38,2], pch=1, col="red")
points(T[39:56,1],T[39:56,2], pch=2, col="purple")
points(T[57:74,1],T[57:74,2], pch=4, col="black")
points(T[75:93,1],T[75:93,2], pch=5, col="green")
points(T[94:112,1],T[94:112,2], pch=6, col="gray")
points(T[113:130,1],T[113:130,2], pch=7, col="cyan")
points(T[131:145,1],T[131:145,2], pch=8, col="brown")
legend(x="topleft", legend=c("21-L", "21-D", "4-L","4-D","32-L","32-D","21-LL","21-HL"),col=c("blue","red","purple","black","green","gray","cyan","brown"),pch=c(3,1,2,4,5,6,7,8), cex=0.7)
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-100,100),main = "raw
expression  scores", cex.main=1)
points(T[20:38,1],T[20:38,2], pch=1, col="red")
points(T[39:56,1],T[39:56,2], pch=2, col="purple")
points(T[57:74,1],T[57:74,2], pch=4, col="black")
points(T[75:93,1],T[75:93,2], pch=5, col="green")
points(T[94:112,1],T[94:112,2], pch=6, col="gray")
points(T[113:130,1],T[113:130,2], pch=7, col="cyan")
points(T[131:145,1],T[131:145,2], pch=8, col="brown")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-500,500),main = "raw
expression  scores", cex.main=1)
points(T[20:38,1],T[20:38,2], pch=1, col="red")
points(T[39:56,1],T[39:56,2], pch=2, col="purple")
points(T[57:74,1],T[57:74,2], pch=4, col="black")
points(T[75:93,1],T[75:93,2], pch=5, col="green")
points(T[94:112,1],T[94:112,2], pch=6, col="gray")
points(T[113:130,1],T[113:130,2], pch=7, col="cyan")
points(T[131:145,1],T[131:145,2], pch=8, col="brown")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-500,500),main = "raw
expression  scores", cex.main=1)
T
View(`T`)
View(df_numeric)
plot(T_m[1:18,1],T_m[1:18,2], pch=3, col="blue", xlab= "PC1(38.2%)",ylab ="PC2(17.9%)",xlim = c(-5,5),ylim = c(-5,5),main = "raw metabolomic
scores", cex.main=1)
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-100,100),main = "raw
expression  scores", cex.main=1)
points(T[20:38,1],T[20:38,2], pch=1, col="red")
points(T[39:56,1],T[39:56,2], pch=2, col="purple")
points(T[57:74,1],T[57:74,2], pch=4, col="black")
points(T[75:93,1],T[75:93,2], pch=5, col="green")
points(T[94:112,1],T[94:112,2], pch=6, col="gray")
points(T[113:130,1],T[113:130,2], pch=7, col="cyan")
points(T[131:145,1],T[131:145,2], pch=8, col="brown")
legend(x="topleft", legend=c("21-L", "21-D", "4-L","4-D","32-L","32-D","21-LL","21-HL"),col=c("blue","red","purple","black","green","gray","cyan","brown"),pch=c(3,1,2,4,5,6,7,8), cex=0.7)
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-100,100),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,1],T[0:38000,2], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-100,100),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], T[0:38000,9], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-100,100),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-10,10),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-100,100),ylim = c(-5,5),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-30,30),ylim = c(-5,5),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-10,10),ylim = c(-5,5),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-5,5),ylim = c(-5,5),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-1,1),ylim = c(-1,1),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-1,1),ylim = c(-2,2),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-2,2),ylim = c(-2,2),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-2,2),ylim = c(-2,2),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,0],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-2,2),ylim = c(-2,2),main = "raw
expression  scores", cex.main=1)
points(T[0:38000,7],T[0:38000,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(23.6%)",ylab ="PC2(12.65%)",xlim = c(-2,2),ylim = c(-2,2),main = "raw
expression  scores", cex.main=1)
points(T[0:188,7],T[0:188,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "raw
expression  scores", cex.main=1)
points(T[0:188,7],T[0:188,8], pch=1, col="red")
plot(T[2:19,1],T[2:19,2], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[0:188,7],T[0:188,8], pch=1, col="red")
View(df)
View(df)
plot(T[0:187,7],T[0:187,8], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,8], pch=1, col="red")
plot(T[0:187,7],T[0:187,8], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,8], pch=1, col="red")
points(T[287:634,7],T[287:634,8], pch=1, col="black")
plot(T[0:187,8],T[0:187,9], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,8],T[188:286,9], pch=1, col="red")
points(T[287:634,8],T[287:634,9], pch=1, col="black")
View(df)
View(df_numeric)
plot(T[0:187,7],T[0:187,134], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-2,2),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,134], pch=1, col="red")
points(T[287:634,7],T[287:634,134], pch=1, col="black")
plot(T[0:187,7],T[0:187,134], pch=3, col="blue", xlab= "PC1(99.97%)",ylab ="PC2(0.03%)",xlim = c(-2,2),ylim = c(-1,1),main = "sheet vs helix", cex.main=1)
points(T[188:286,7],T[188:286,134], pch=1, col="red")
points(T[287:634,7],T[287:634,134], pch=1, col="black")
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv', row.names = "X")
View(df)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
View(df)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- data[ , ncol(data)]                   # Apply ncol function
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
last_vec
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
res <- rcorr(as.matrix(df_numeric))
res <- rcorr(as.matrix(df_numeric))
res <- rcorr(as.matrix(df_numeric))
round(res$P, 3)
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(dat[, c("prob_sheet", "prob_coil", "prob_helix")])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(dat[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(res[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c(prob_sheet, prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c("prob_sheet", prob_coil, prob_helix)])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c("prob_sheet", "prob_coil", "prob_helix")])
res <- rcorr(as.matrix(df_numeric))
# round(res$P, 3)
pairs(df_numeric[, c("prob_sheet", "prob_coil", "prob_helix", "p_interface")])
install.packages("corrplot")
library(Hmisc)
library(corrplot)
corrplot(cor(df_numeric),
method = "number",
type = "upper" # show only upper side
)
knitr::opts_chunk$set(echo = TRUE)
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id))
df_rowsums<-rowSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
df_colsums <- colSums(df_numeric)
hist(df_colsums, xlab='Total amounts per column', main = 'Histogram of data colsums')
View(df_numeric)
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id, X, domain, Rlength))
df_rowsums<-rowSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
df_colsums <- colSums(df_numeric)
hist(df_colsums, xlab='Total amounts per column', main = 'Histogram of data colsums')
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id, X, domain, Rlength))
last_vec <- df_numeric[ , ncol(df)]
df<-read.csv('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Machine Learning/Data/Protein-Protein Interaction/PPI_def/ppi.csv')
last_vec <- df[ , ncol(df)]                   # Apply ncol function
df_numeric<-subset(df, select = -c(aa_ProtPosition,sequence, uniprot_id, X, domain, Rlength))
last_vec <- df_numeric[ , ncol(df_numeric)]
df_rowsums<-rowSums(df_numeric)
hist(df_rowsums, xlab='Total amounts per row', main = "Histogram of data rowsums")
df_colsums <- colSums(df_numeric)
hist(df_colsums, xlab='Total amounts per column', main = 'Histogram of data colsums')
df_numeric.mean <- apply(transformed,1,mean)
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.5, col='blue', ylim = c(-0.03,0.3),
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='blue', ylim = c(-0.03,0.3),
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='blue', xlim = c(0.1,0.4), ylim = c(-0.03,0.3),
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='blue',
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='red',
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of transformed data')
df_numeric.mean <- apply(df_numeric,1,mean)
df_numeric.sd <- apply(df_numeric,1,sd)
plot(df_numeric.mean, y=df_numeric.sd, pch=20, cex=0.2, col='red',
xlab='Mean value', ylab='Sd of values')
title('SD versus mean rate of data')
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
setwd('C:/Users/nikos/OneDrive/Έγγραφα/MSc/Classes/Bioinformatics for Translational Medicine/bstm-project')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
#as.data.frame(data)
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
#as.data.frame(clinic)
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
rocVarImp<-filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE)
package('carot')
library('carot')
library('caret')
library('caret')
library('caret')
library('gbm')
data<-read.delim('train_call.tsv', header = TRUE, sep = "\t", quote = "\"", dec = ".",
fill = TRUE, comment.char = "")
#as.data.frame(data)
data<-t(data)
clinic<-read.delim('train_clinical.txt', header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "",row.names='Sample')
#as.data.frame(clinic)
Combo<-merge(clinic, data, by="row.names")
row.names(Combo)<-Combo$Row.names
Combo$Row.names<-NULL
rocVarImp<-filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE)
head(rocVarImp)
View(rocVarImp)
View(rocVarImp)
View(Combo)
View(Combo)
help(rocVarImp)
??rocVarImp
rocVarImp<-filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE)
help("filterVarImp")
apply(Combo, 1, filterVarImp)
apply(as.factor(Combo), 1, filterVarImp)
apply(Combo[:,], 1, filterVarImp)
apply(Combo[:], 1, filterVarImp)
apply(Combo, 1, filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE))
apply(Combo, 1, filterVarImp)
is.list(Combo)
apply(Combo, 1, filterVarImp)
is.list(Combo)
apply(Combo, 1, filterVarImp)
apply(as.matrix(Combo), 1, filterVarImp)
apply(as.list(Combo), 1, filterVarImp)
apply(Combo, 1, filterVarImp)
apply(Combo, 1, rocVarImp)
rocVarImp<-filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE){
rocVarImp<-filterVarImp(Combo[,-1], as.factor(Combo[,1]), nonpara = FALSE)
apply(Combo, 2, rocVarImp)
apply(Combo, 1, rocVarImp)
apply(rocVarImp, 1, sum)
final<-apply(rocVarImp, 1, sum)
final<-as.factor(apply(rocVarImp, 1, sum))
final<-as.vector(apply(rocVarImp, 1, sum))
final<-as.vector(apply(rocVarImp, 1, sum))
final
final<-as.vector(apply(rocVarImp, 1, mean))
final
help("order")
order(final, decreasing = TRUE)
features<-order(final, decreasing = TRUE)
final
features<-order(final, decreasing = FALSE)
final<-apply(rocVarImp, 1, mean)
features<-order(final, decreasing = FALSE)
final<-as.data.frame(apply(rocVarImp, 1, mean))
View(final)
features<-order(final, decreasing = FALSE)
final<-as.data.frame.vector(apply(rocVarImp, 1, mean))
View(final)
features<-order(final, decreasing = FALSE)
final<-apply(rocVarImp, 1, mean)
features<-final[order(final, decreasing = FALSE)]
features<-final[order(final), decreasing = FALSE)]
features<-final[order(final), decreasing = FALSE]
features<-final[order(final,decreasing = FALSE)]
features<-final[order(final,decreasing = TRUE)]
features
features<-as.data.frame(features)
View(features)
features<-final[order(final,decreasing = TRUE)]
as.data.frame(features)
features<-as.data.frame(features)
write.csv(Combo, "combo.csv", row.names=TRUE)
write.csv(features,"features.csv", row.names=FALSE)
